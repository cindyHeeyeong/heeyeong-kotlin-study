1. 프로퍼티
자바에서는 클래스 내에 자료를 저장하고 접근하기 위해 필드와 메소드를 사용한다.

Java
public class Person {
private String name; 

public String getName() {
return name; }
public void setName(name) {
this.name = name; }

name에 접근하기 위해 getter/setter메소드가 늘어난다.

코틀린은 이런 점을 해결하기 위해 프로퍼티를 사용한다. 
프로퍼티는 정보를 저장할 수 있는 필드와 getter/setter메소드를 함께 제공한다.
앞의 자바 코드를 프로퍼티로 표현하면 다음과 같다

Kotlin
class Person {
var name : String ? = null
var address : String ? = null 
}

여기에서 프로퍼티의 타입으로 String ?을 사용했는데 해당 프로퍼티에 null이 들어갈 수 있음을 명시한다.
코틀린의 프로퍼티도 값(val)와 변수(var) 중 하나로 선언한다.
위의 예에서는 두 프로퍼티를 모두 변수(var)로 선언했는데 이는 값이 언제든지 변할 수 있는 필드이기 때문이다.

값이 변하지 않는 데이터 처리
Kotlin
class Person {
val name : String ?= null //값만 읽을 수 있는 val(정보가 바뀌지 않을 때), getter
var address : String ?= null //값을 읽고 쓰는게 모두 가능하다 , getter/setter

정리 -->  val(값이 변하지 않는 값, getter, 값을 읽어올 수만 있음), var(값이 변하는값, getter/setter, 값을 읽고 쓸 수 있다)

각 프로퍼티에는 초깃 값이 null로 명시적으로 할당 되어있다.
코틀린에서는 클래스 멤버로 사용하는 프로퍼티는 초깃값을 선언해줘 한다. 그렇지 않을 경우 컴파일 에러 발생
만약 초깃값을 나중에 설정해 주고 싶다면 lateinit 키워드를 사용한다.
lateinit키워드는 var키워드에 사용해준다

사용 예제)
val address : String ? = null //val는 초깃값을 설정해 줘야 한다.
lateinit var name : String ?

lateinit 키워드 없이 var 변수에 초기화를 안하면 Uninitialized propertyAccesExction이 발생한다.



